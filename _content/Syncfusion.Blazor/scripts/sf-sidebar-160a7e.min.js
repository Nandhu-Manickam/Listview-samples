(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-sidebar"],{

/***/ "./bundles/sf-sidebar.js":
/*!*******************************!*\
  !*** ./bundles/sf-sidebar.js ***!
  \*******************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_sidebar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-sidebar.js */ "./modules/sf-sidebar.js");
/* harmony import */ var _modules_sf_sidebar_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_sidebar_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-sidebar.js":
/*!*******************************!*\
  !*** ./modules/sf-sidebar.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Sidebar = function () {
  'use strict';

  var SfSidebar =
  /** @class */
  function () {
    // tslint:disable
    function SfSidebar(element, dotnetRef, property) {
      this.element = element;
      this.element.blazor__instance = this;
      this.dotnetRef = dotnetRef;
      this.types = property.Type;
      this.position = property.Position;
    } // tslint:enable


    SfSidebar.prototype.initialize = function () {
      this.setTarget();
      this.setType(this.type);
    };

    SfSidebar.prototype.setTarget = function () {
      this.targetEle = this.element.nextElementSibling;
      this.sidebarEleCopy = this.element.cloneNode(true);
    };

    SfSidebar.prototype.setType = function (type) {
      var elementWidth = this.element.getBoundingClientRect().width;
      var sibling = document.querySelector('.e-main-content') || this.targetEle;
      var isSibling = false;

      if (sibling) {
        isSibling = true;
        sibling.style.transform = 'translateX(' + 0 + 'px)';

        if (!sf.base.Browser.isDevice && this.type !== 'Auto') {
          this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
        }
      }

      this.dotnetRef.invokeMethodAsync('SetType', elementWidth, isSibling);
    };

    return SfSidebar;
  }(); // tslint:disable


  var Sidebar = {
    initialize: function initialize(element, dotnetRef, property) {
      new SfSidebar(element, dotnetRef, property);
      element.blazor__instance.initialize();
      this.type = property.Type;
    }
  };
  return Sidebar;
}();

/***/ })

}]);