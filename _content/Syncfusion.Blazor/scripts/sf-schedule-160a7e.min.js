(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-schedule"],{

/***/ "./bundles/sf-schedule.js":
/*!********************************!*\
  !*** ./bundles/sf-schedule.js ***!
  \********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_schedule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-schedule.js */ "./modules/sf-schedule.js");
/* harmony import */ var _modules_sf_schedule_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_schedule_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-schedule.js":
/*!********************************!*\
  !*** ./modules/sf-schedule.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.Schedule = function () {
  'use strict';
  /**
   * CSS Constants
   */

  /** @hidden */

  var ROOT = 'e-schedule';
  /** @hidden */

  var RTL = 'e-rtl';
  /** @hidden */

  var DEVICE_CLASS = 'e-device';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var ALLDAY_CELLS_CLASS = 'e-all-day-cells';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var CONTENT_TABLE_CLASS = 'e-content-table';
  /** @hidden */

  var WORK_CELLS_CLASS = 'e-work-cells';
  /** @hidden */

  var WORK_HOURS_CLASS = 'e-work-hours';
  /** @hidden */

  var POPUP_OPEN = 'e-popup-open';
  /** @hidden */

  /** @hidden */

  var DATE_HEADER_WRAP_CLASS = 'e-date-header-wrap';
  /** @hidden */

  var DATE_HEADER_CONTAINER_CLASS = 'e-date-header-container';
  /** @hidden */

  var HEADER_CELLS_CLASS = 'e-header-cells';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  var CURRENT_DAY_CLASS = 'e-current-day';
  /** @hidden */

  var CURRENTDATE_CLASS = 'e-current-date';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var RESOURCE_GROUP_CELLS_CLASS = 'e-resource-group-cells';
  /** @hidden */

  /** @hidden */

  var RESOURCE_COLUMN_WRAP_CLASS = 'e-resource-column-wrap';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var TIME_CELLS_WRAP_CLASS = 'e-time-cells-wrap';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var CURRENT_TIME_CLASS = 'e-current-time';
  /** @hidden */

  var CURRENT_TIMELINE_CLASS = 'e-current-timeline';
  /** @hidden */

  var PREVIOUS_TIMELINE_CLASS = 'e-previous-timeline';
  /** @hidden */

  var HIDE_CHILDS_CLASS = 'e-hide-childs';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  var TIMELINE_WRAPPER_CLASS = 'e-timeline-wrapper';
  /** @hidden */

  var APPOINTMENT_WRAPPER_CLASS = 'e-appointment-wrapper';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var RESOURCE_HEADER_TOOLBAR = 'e-schedule-resource-toolbar';
  /** @hidden */

  /** @hidden */

  var WEEK_NUMBER_WRAPPER_CLASS = 'e-week-number-wrapper';
  /** @hidden */

  /** @hidden */

  var APPOINTMENT_WRAP_CLASS = 'e-appointment-wrap';
  /** @hidden */

  var WRAPPER_CONTAINER_CLASS = 'e-wrapper-container';
  /** @hidden */

  /** @hidden */

  var APPOINTMENT_CLASS = 'e-appointment';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var TABLE_WRAP_CLASS = 'e-table-wrap';
  /** @hidden */

  /** @hidden */

  var CONTENT_WRAP_CLASS = 'e-content-wrap';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var NAVIGATE_CLASS = 'e-navigate';
  /** @hidden */

  var DATE_HEADER_CLASS = 'e-date-header';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  var MORE_INDICATOR_CLASS = 'e-more-indicator';
  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /** @hidden */

  /**
   * Work cell interactions
   */

  var WorkCellInteraction =
  /** @class */
  function () {
    function WorkCellInteraction(parent) {
      this.parent = parent; //EventHandler.add(this.parent.element, 'mouseover', this.onHover, this);
    }

    WorkCellInteraction.prototype.cellMouseDown = function (e) {
      if (this.isPreventAction(e)) {
        return;
      }

      this.parent.onCellMouseDown(e);
    };

    WorkCellInteraction.prototype.cellClick = function (e) {
      if (this.isPreventAction(e)) {
        return;
      } // let queryStr: string = '.' + cls.WORK_CELLS_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' + cls.HEADER_CELLS_CLASS;
      // let target: HTMLTableCellElement = closest((e.target as Element), queryStr) as HTMLTableCellElement;
      // if (isNullOrUndefined(target)) {
      //     return;
      // }
      // if (!isNullOrUndefined(closest(e.target as Element, '.' + cls.NEW_EVENT_CLASS))) {
      //     this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');
      //     return;
      // }
      // let navigateEle: Element = closest((e.target as Element), '.' + cls.NAVIGATE_CLASS);
      // let navigateView: View = this.parent.getNavigateView();
      // let sameView: boolean = this.parent.currentView === navigateView;
      // if (isNullOrUndefined(navigateEle) || sameView ||
      //     isNullOrUndefined(this.parent.viewOptions[navigateView.charAt(0).toLowerCase() + navigateView.slice(1)])) {
      //     if (this.parent.activeViewOptions.readonly && this.parent.currentView !== 'MonthAgenda') {
      //         this.parent.quickPopup.quickPopupHide();
      //         return;
      //     }
      //     if (this.parent.isAdaptive && ((e.target as Element).classList.contains(cls.MORE_INDICATOR_CLASS) ||
      //         closest((e.target as Element), '.' + cls.MORE_INDICATOR_CLASS))) {
      //         return;
      //     }
      //     let isWorkCell: boolean = target.classList.contains(cls.WORK_CELLS_CLASS) ||
      //         target.classList.contains(cls.ALLDAY_CELLS_CLASS);
      //     if (isWorkCell && e.shiftKey && e.which === 1 && this.parent.keyboardInteractionModule) {
      //         this.parent.keyboardInteractionModule.onMouseSelection(e);
      //         return;
      //     }
      //     this.parent.activeCellsData = this.parent.getCellDetails(target);
      //     let args: CellClickEventArgs =
      //         <CellClickEventArgs>extend(this.parent.activeCellsData, { cancel: false, event: e, name: 'cellClick' });
      //     this.parent.trigger(event.cellClick, args, (clickArgs: CellClickEventArgs) => {
      //         clickArgs = this.serializingData(clickArgs, e);
      //         if (!clickArgs.cancel) {
      //             if (isWorkCell) {
      //                 this.parent.selectCell(target);
      //             }
      //             if (this.parent.allowInline) {
      //                 let inlineArgs: InlineClickArgs = {
      //                     element: clickArgs.element as HTMLElement,
      //                     groupIndex: clickArgs.groupIndex, type: 'Cell'
      //                 };
      //                 this.parent.notify(event.inlineClick, inlineArgs);
      //             } else {
      //                 this.parent.notify(event.cellClick, clickArgs);
      //             }
      //         } else {
      //             if (this.parent.quickPopup) {
      //                 this.parent.quickPopup.quickPopupHide();
      //             }
      //         }
      //     });
      // } else {
      //     let date: Date = this.parent.getDateFromElement(target);
      //     if (!isNullOrUndefined(date) && !this.parent.isAdaptive && this.parent.isMinMaxDate(date)) {
      //         this.parent.setScheduleProperties({ selectedDate: date });
      //         this.parent.changeView(this.parent.getNavigateView(), e);
      //     }
      // }

    };

    WorkCellInteraction.prototype.cellDblClick = function (e) {
      if (this.parent.activeViewOptions.readonly || this.isPreventAction(e)) {
        return;
      } // let args: CellClickEventArgs =
      //     <CellClickEventArgs>extend(this.parent.activeCellsData, { cancel: false, event: e, name: 'cellDoubleClick' });
      // this.parent.trigger(event.cellDoubleClick, args, (clickArgs: CellClickEventArgs) => {
      //     clickArgs = this.serializingData(clickArgs, e);
      //     let date: Date = new Date(clickArgs.startTime.getTime());
      //     if (!this.parent.isMinMaxDate(new Date(date.setHours(0, 0, 0, 0)))) {
      //         return;
      //     }
      //     if (!clickArgs.cancel) {
      //         this.parent.eventWindow.openEditor(this.parent.activeCellsData, 'Add');
      //     }
      // });

    }; // private serializingData(clickArgs: CellClickEventArgs, e: Event): CellClickEventArgs {
    //     if (isBlazor()) {
    //         clickArgs.startTime = this.parent.getDateTime(clickArgs.startTime);
    //         clickArgs.endTime = this.parent.getDateTime(clickArgs.endTime);
    //         if (clickArgs.element) {
    //             clickArgs.element = getElement(clickArgs.element);
    //         }
    //         if (clickArgs.event) {
    //             clickArgs.event = e;
    //         }
    //     }
    //     return clickArgs;
    // }
    // private onHover(e: MouseEvent): void {
    //     let targetSelector: string = '.' + cls.WORK_CELLS_CLASS + ',.' + cls.TIME_SLOT_CLASS + ',.' + cls.ALLDAY_CELLS_CLASS + ',.' +
    //         cls.HEADER_CELLS_CLASS + ',.' + cls.RESOURCE_CELLS_CLASS + ',.' + cls.APPOINTMENT_CLASS + ',.' + cls.WEEK_NUMBER_CLASS +
    //         ',.' + cls.MONTH_HEADER_CLASS;
    //     let hoverTarget: HTMLElement = closest((e.target as Element), targetSelector) as HTMLElement;
    //     if (hoverTarget) {
    //         let hoverArgs: HoverEventArgs = { element: hoverTarget, event: e };
    //         this.parent.trigger(event.hover, hoverArgs);
    //     }
    // }


    WorkCellInteraction.prototype.isPreventAction = function (e) {
      if (sf.base.closest(e.target, '.' + NAVIGATE_CLASS)) {
        return false;
      }

      if (sf.base.closest(e.target, '.' + APPOINTMENT_WRAPPER_CLASS) && !sf.base.closest(e.target, '.' + MORE_INDICATOR_CLASS)) {
        return true;
      }

      var target = sf.base.closest(e.target, '.' + APPOINTMENT_CLASS + ',.' + RESOURCE_GROUP_CELLS_CLASS);

      if (!sf.base.isNullOrUndefined(target)) {
        return true;
      }

      target = sf.base.closest(e.target, '.' + HEADER_CELLS_CLASS);

      if (this.parent.isTimelineView() && !sf.base.isNullOrUndefined(target)) {
        return true;
      }

      return false;
    };

    WorkCellInteraction.prototype.destroy = function () {//EventHandler.remove(this.parent.element, 'mouseover', this.onHover);
    };

    return WorkCellInteraction;
  }();
  /**
   * Schedule common utilities
   */


  var WEEK_LENGTH = 7;
  var MS_PER_MINUTE = 60000;

  function getWeekFirstDate(date1, firstDayOfWeek) {
    var date = new Date(date1.getTime());
    firstDayOfWeek = (firstDayOfWeek - date.getDay() + 7 * -1) % 7;
    return new Date(date.setDate(date.getDate() + firstDayOfWeek));
  }

  function firstDateOfMonth(date) {
    return new Date(date.getFullYear(), date.getMonth());
  }

  function lastDateOfMonth(dt) {
    return new Date(dt.getFullYear(), dt.getMonth() + 1, 0);
  }

  function resetTime(date) {
    return new Date(date.getFullYear(), date.getMonth(), date.getDate());
  }

  function getDateInMs(date) {
    var sysDateOffset = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTimezoneOffset();
    var dateOffset = date.getTimezoneOffset();
    var tzOffsetDiff = dateOffset - sysDateOffset;
    return date.getTime() - new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0).getTime() - tzOffsetDiff * 60 * 1000;
  }

  function addDays(date, i) {
    date = new Date('' + date);
    return new Date(date.setDate(date.getDate() + i));
  }

  function addMonths(date, i) {
    date = new Date('' + date);
    var day = date.getDate();
    date.setDate(1);
    date.setMonth(date.getMonth() + i);
    date.setDate(Math.min(day, getMaxDays(date)));
    return date;
  }

  function getMaxDays(d) {
    var date = new Date(d.getFullYear(), d.getMonth() + 1, 0);
    return date.getDate();
  }
  /** @hidden */


  var scrollWidth = null;
  /** @hidden */

  function getScrollBarWidth() {
    if (scrollWidth !== null) {
      return scrollWidth;
    }

    var divNode = sf.base.createElement('div');
    var value = 0;
    divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';
    document.body.appendChild(divNode);
    var ratio = devicePixelRatio ? devicePixelRatio.toFixed(2) === '1.10' || devicePixelRatio <= 1 ? Math.ceil(devicePixelRatio % 1) : Math.floor(devicePixelRatio % 1) : 0;
    value = divNode.offsetWidth - divNode.clientWidth - ratio | 0;
    document.body.removeChild(divNode);
    return scrollWidth = value;
  }

  function addLocalOffset(date) {
    if (sf.base.isBlazor()) {
      var dateValue = new Date(+date - date.getTimezoneOffset() * 60000);
      return dateValue;
    }

    return date;
  }
  /**
   * view base
   */


  var ViewBase =
  /** @class */
  function () {
    function ViewBase(parent) {
      this.parent = parent;
    }

    ViewBase.prototype.serverRenderLayout = function () {// Need only for layout server rendering
    };

    ViewBase.prototype.getScrollXIndent = function (content) {
      return content.offsetHeight - content.clientHeight > 0 ? getScrollBarWidth() : 0;
    };

    ViewBase.prototype.scrollTopPanel = function (target) {
      this.getDatesHeaderElement().firstElementChild.scrollLeft = target.scrollLeft;
    };

    ViewBase.prototype.scrollHeaderLabels = function (target) {
      var headerTable = this.element.querySelector('.e-date-header-wrap table');
      var colWidth = headerTable.offsetWidth / headerTable.querySelectorAll('colgroup col').length;

      var applyLeft = function applyLeft(headerCells, isRtl) {
        var currentCell;
        var tdLeft = 0;
        var colSpan = 0;
        var hiddenLeft = isRtl ? target.scrollWidth - target.offsetWidth - target.scrollLeft : target.scrollLeft;

        for (var _i = 0, headerCells_2 = headerCells; _i < headerCells_2.length; _i++) {
          var cell = headerCells_2[_i];
          colSpan += parseInt(cell.getAttribute('colSpan'), 10);

          if (colSpan > Math.floor(hiddenLeft / colWidth)) {
            currentCell = cell;
            break;
          }

          tdLeft += cell.offsetWidth;
        }

        currentCell.children[0].style[isRtl ? 'right' : 'left'] = hiddenLeft - tdLeft + 'px';
      };

      var classNames = ['.e-header-year-cell', '.e-header-month-cell', '.e-header-week-cell', '.e-header-cells'];

      for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
        var className = classNames_1[_i];
        var headerCells = [].slice.call(this.element.querySelectorAll(className));

        if (headerCells.length > 0) {
          for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
            var element = headerCells_1[_a];
            element.children[0].style[this.parent.options.enableRtl ? 'right' : 'left'] = '';
          }

          applyLeft(headerCells, this.parent.options.enableRtl);
        }
      }
    };

    ViewBase.prototype.getHeaderBarHeight = function (includeResHeight) {
      if (includeResHeight === void 0) {
        includeResHeight = false;
      }

      var headerBarHeight = 2; // if (this.parent.headerModule) {
      //     headerBarHeight += util.getOuterHeight(this.parent.headerModule.getHeaderElement());
      // }

      if (this.parent.uiStateValues.isGroupAdaptive || includeResHeight) {
        var resHeader = this.parent.element.querySelector('.' + RESOURCE_HEADER_TOOLBAR);

        if (resHeader) {
          headerBarHeight += resHeader.offsetHeight;
        }
      }

      return headerBarHeight;
    };

    ViewBase.prototype.getDatesHeaderElement = function () {
      return this.element.querySelector('.' + DATE_HEADER_CONTAINER_CLASS);
    };

    ViewBase.prototype.highlightCurrentTime = function () {// Here showTimeIndicator functionalities
    };

    ViewBase.prototype.startDate = function () {
      if (this.parent.options.currentView === 'WorkWeek') {
        var startDate = this.renderDates[0]; // if (this.parent.activeViewOptions.group.resources.length > 0) {
        //     startDate = this.parent.resourceBase.getResourceRenderDates()[0];
        // }

        return startDate;
      }

      return this.renderDates[0];
    };

    ViewBase.prototype.endDate = function () {
      if (this.parent.options.currentView === 'WorkWeek') {
        var endDate = addDays(this.renderDates[this.renderDates.length - 1], 1); // if (this.parent.activeViewOptions.group.resources.length > 0) {
        //     endDate = util.addDays(this.parent.resourceBase.getResourceRenderDates().slice(-1)[0], 1);
        // }

        return endDate;
      }

      return addDays(this.renderDates[this.renderDates.length - 1], 1);
    };

    ViewBase.prototype.getStartHour = function () {
      var startHour = this.parent.getStartEndTime(this.parent.activeViewOptions.startHour);

      if (sf.base.isNullOrUndefined(startHour)) {
        startHour = new Date(2000, 0, 0, 0);
      }

      return startHour;
    };

    ViewBase.prototype.getEndHour = function () {
      var endHour = this.parent.getStartEndTime(this.parent.activeViewOptions.endHour);

      if (sf.base.isNullOrUndefined(endHour)) {
        endHour = new Date(2000, 0, 0, 0);
      }

      return endHour;
    };

    ViewBase.prototype.isCurrentDate = function (date) {
      return date.setHours(0, 0, 0, 0) === this.parent.getCurrentTime().setHours(0, 0, 0, 0);
    };

    ViewBase.prototype.isCurrentMonth = function (date) {
      return date.getFullYear() === this.parent.getCurrentTime().getFullYear() && date.getMonth() === this.parent.getCurrentTime().getMonth();
    };

    ViewBase.prototype.isWorkDay = function (date, workDays) {
      if (workDays === void 0) {
        workDays = this.parent.activeViewOptions.workDays;
      }

      if (workDays.indexOf(date.getDay()) >= 0) {
        return true;
      }

      return false;
    };

    ViewBase.prototype.isWorkHour = function (date, startHour, endHour, workDays) {
      if (sf.base.isNullOrUndefined(startHour) || sf.base.isNullOrUndefined(endHour)) {
        return false;
      }

      startHour.setMilliseconds(0);
      endHour.setMilliseconds(0);
      return !(getDateInMs(date) < getDateInMs(startHour) || getDateInMs(date) >= getDateInMs(endHour) || !this.isWorkDay(date, workDays));
    };

    ViewBase.prototype.getRenderDates = function (workDays) {
      var renderDates = []; // Due to same code for vertical and time line, week & work week views, if condition has used

      if (this.parent.options.currentView === 'Week' || this.parent.options.currentView === 'TimelineWeek') {
        var selectedDate = resetTime(this.parent.options.selectedDate);
        var start = getWeekFirstDate(selectedDate, this.parent.activeViewOptions.firstDayOfWeek);

        for (var i = 0, length_1 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_1; i++) {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }

          start = addDays(start, 1);
        }
      } else if (this.parent.options.currentView === 'WorkWeek' || this.parent.options.currentView === 'TimelineWorkWeek') {
        var date = resetTime(this.parent.options.selectedDate);
        var start = getWeekFirstDate(date, this.parent.activeViewOptions.firstDayOfWeek);

        for (var i = 0, length_2 = WEEK_LENGTH * this.parent.activeViewOptions.interval; i < length_2; i++) {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }

          start = addDays(start, 1);
        }
      } else {
        var start = resetTime(this.parent.options.selectedDate);

        do {
          if (this.parent.activeViewOptions.showWeekend) {
            renderDates.push(start);
          } else {
            if (this.isWorkDay(start, workDays)) {
              renderDates.push(start);
            }
          }

          start = addDays(start, 1);
        } while (this.parent.activeViewOptions.interval !== renderDates.length);
      }

      if (!workDays) {
        this.renderDates = renderDates;
      }

      return renderDates;
    };

    ViewBase.prototype.getColElements = function () {
      return [].slice.call(this.element.querySelectorAll('.' + CONTENT_WRAP_CLASS + ' col, .' + DATE_HEADER_WRAP_CLASS + ' col'));
    };

    ViewBase.prototype.setColWidth = function (content) {
      if (this.parent.isTimelineView()) {
        var colElements = this.getColElements();
        var contentBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');
        var colWidth_1 = Math.ceil(contentBody.offsetWidth / (colElements.length / 2));
        colElements.forEach(function (col) {
          return sf.base.setStyleAttribute(col, {
            'width': sf.base.formatUnit(colWidth_1)
          });
        });

        if (content.offsetHeight !== content.clientHeight) {
          var resourceColumn = this.parent.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);

          if (!sf.base.isNullOrUndefined(resourceColumn)) {
            sf.base.setStyleAttribute(resourceColumn, {
              'height': sf.base.formatUnit(content.clientHeight)
            });
          }
        }
      }
    };

    ViewBase.prototype.resetColWidth = function () {
      var colElements = this.getColElements();

      for (var _i = 0, colElements_1 = colElements; _i < colElements_1.length; _i++) {
        var col = colElements_1[_i];
        col.style.width = '';
      }
    };

    ViewBase.prototype.getContentAreaElement = function () {
      return this.element.querySelector('.' + CONTENT_WRAP_CLASS);
    };

    ViewBase.prototype.scrollToDate = function (scrollDate) {
      if (['Month', 'TimelineMonth'].indexOf(this.parent.options.currentView) === -1 || sf.base.isNullOrUndefined(scrollDate)) {
        return;
      }

      var scrollWrap = this.getContentAreaElement();
      var tdDate = this.parent.getMsFromDate(new Date(resetTime(new Date(+scrollDate)).getTime()));
      var dateElement = scrollWrap.querySelector("." + WORK_CELLS_CLASS + "[data-date=\"" + tdDate + "\"]");

      if (this.parent.options.currentView === 'Month' && dateElement) {
        scrollWrap.scrollTop = dateElement.offsetTop;
      }

      if (this.parent.options.currentView === 'TimelineMonth' && dateElement) {
        scrollWrap.scrollLeft = dateElement.offsetLeft;
      }
    };

    return ViewBase;
  }();

  var __extends = undefined && undefined.__extends || function () {
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    return function (d, b) {
      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * vertical view
   */


  var VerticalViews =
  /** @class */
  function (_super) {
    __extends(VerticalViews, _super);
    /**
     * Constructor for vertical view
     */


    function VerticalViews(parent) {
      var _this = _super.call(this, parent) || this;

      _this.isInverseTableSelect = true;
      _this.baseCssClass = 'e-vertical-view';
      return _this;
    }

    VerticalViews.prototype.onDataReady = function () {// if (this.parent.activeViewOptions.timeScale.enable) {
      //     let appointment: VerticalEvent = new VerticalEvent(this.parent);
      //     appointment.renderAppointments();
      // } else {
      //     let appointment: MonthEvent = new MonthEvent(this.parent);
      //     appointment.renderAppointments();
      // }
    };

    VerticalViews.prototype.onContentScroll = function (e) {
      this.parent.removeNewEventElement();
      var target = e.target;
      this.parent.onVirtualScroll();
      this.scrollLeftPanel(target);
      this.scrollTopPanel(target);

      if (!this.parent.isAdaptive) {
        this.parent.uiStateValues.top = target.scrollTop;
      }

      this.parent.uiStateValues.left = target.scrollLeft;

      if (!sf.base.isNullOrUndefined(this.parent.quickPopup)) {
        this.parent.quickPopup.quickPopupHide();
      }
    };

    VerticalViews.prototype.onApaptiveMove = function (e) {
      if (this.parent.uiStateValues.action) {
        e.preventDefault();
      }
    };

    VerticalViews.prototype.scrollLeftPanel = function (target) {
      var leftPanel = this.getLeftPanelElement();

      if (!sf.base.isNullOrUndefined(leftPanel)) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };

    VerticalViews.prototype.onScrollUiUpdate = function (args) {
      var headerBarHeight = this.getHeaderBarHeight();
      var timecells = this.getLeftPanelElement();
      var content = this.getContentAreaElement();
      var header = this.getDatesHeaderElement();
      var scrollerHeight = this.parent.element.offsetHeight - headerBarHeight - header.offsetHeight;
      this.setColWidth(content);
      this.setContentHeight(content, timecells, scrollerHeight);
      var scrollBarWidth = getScrollBarWidth(); // tslint:disable:no-any

      header.firstElementChild.style[args.cssProperties.rtlBorder] = '';
      header.style[args.cssProperties.rtlPadding] = '';

      if (content.offsetWidth - content.clientWidth > 0) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
      } else {
        header.firstElementChild.style[args.cssProperties.border] = '';
        header.style[args.cssProperties.padding] = '';
      } // tslint:enable:no-any


      if (!args.isPreventScrollUpdate) {
        if (this.parent.uiStateValues.isInitial) {
          this.scrollToWorkHour();
          this.parent.uiStateValues.isInitial = false;
        } else {
          if (timecells) {
            timecells.scrollTop = this.parent.uiStateValues.top;
          }

          content.scrollTop = this.parent.uiStateValues.top;
          content.scrollLeft = this.parent.uiStateValues.left;
        }
      }

      if (this.parent.activeViewOptions.timeScale.enable) {
        this.highlightCurrentTime();
      }
    };

    VerticalViews.prototype.setContentHeight = function (element, leftPanelElement, height) {
      if (!sf.base.isNullOrUndefined(leftPanelElement)) {
        leftPanelElement.style.height = this.parent.options.height === 'auto' ? 'auto' : sf.base.formatUnit(height - this.getScrollXIndent(element));
      }

      element.style.height = this.parent.options.height === 'auto' ? 'auto' : sf.base.formatUnit(height);
    };

    VerticalViews.prototype.scrollToWorkHour = function () {
      if (this.parent.options.workHours.highlight) {
        var firstWorkHourCell = this.element.querySelector('.' + WORK_HOURS_CLASS);

        if (firstWorkHourCell) {
          this.getContentAreaElement().scrollTop = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.top = firstWorkHourCell.offsetTop;
          this.parent.uiStateValues.left = 0;
        }
      }
    };

    VerticalViews.prototype.scrollToHour = function (hour, scrollDate) {
      var date = this.parent.getStartEndTime(hour);

      if (sf.base.isNullOrUndefined(date) || !sf.base.isNullOrUndefined(scrollDate)) {
        return;
      }

      this.getContentAreaElement().scrollTop = this.getTopFromDateTime(date);
    };

    VerticalViews.prototype.isWorkHourRange = function (date) {
      return this.getStartHour().getTime() <= date.getTime() && this.getEndHour().getTime() >= date.getTime();
    };

    VerticalViews.prototype.highlightCurrentTime = function () {
      var _this = this;

      if (this.parent.activeViewOptions.headerRows && this.parent.activeViewOptions.headerRows.length > 0 && this.parent.activeViewOptions.headerRows.slice(-1)[0].option !== 'Hour') {
        return;
      }

      var curEle = [].slice.call(this.element.querySelectorAll('.' + CURRENT_DAY_CLASS));

      if (curEle.length > 0) {
        sf.base.removeClass(curEle, CURRENT_DAY_CLASS);
      }

      var curDate = addLocalOffset(new Date(new Date().setHours(0, 0, 0, 0)));
      var queryString = '.' + DATE_HEADER_CLASS + '[data-date="' + curDate.getTime().toString() + '"]';
      curEle = [].slice.call(this.element.querySelectorAll(queryString));

      for (var _i = 0, curEle_1 = curEle; _i < curEle_1.length; _i++) {
        var ele = curEle_1[_i];
        sf.base.addClass([ele], CURRENT_DAY_CLASS);
      }

      if (this.parent.options.showTimeIndicator && this.isWorkHourRange(this.parent.getCurrentTime())) {
        var currentDateIndex = this.getCurrentTimeIndicatorIndex();

        if (currentDateIndex.length > 0) {
          var workCells = [].slice.call(this.element.querySelectorAll('.' + WORK_CELLS_CLASS));

          if (workCells.length > 0) {
            this.changeCurrentTimePosition();
          }

          if (sf.base.isNullOrUndefined(this.currentTimeIndicatorTimer)) {
            this.currentTimeIndicatorTimer = window.setInterval(function () {
              _this.changeCurrentTimePosition();
            }, MS_PER_MINUTE);
          }
        } else {
          this.clearCurrentTimeIndicatorTimer();
        }
      } else {
        this.clearCurrentTimeIndicatorTimer();
      }
    };

    VerticalViews.prototype.getCurrentTimeIndicatorIndex = function () {
      var currentDateIndex = [];

      if (!sf.base.isNullOrUndefined(this.parent.resourceBase) && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        var count = 0;

        for (var _i = 0, _a = this.parent.resourceBase.lastResourceLevel; _i < _a.length; _i++) {
          var resource = _a[_i];
          var index = this.parent.getIndexOfDate(resource.renderDates, resetTime(this.parent.getCurrentTime()));

          if (index >= 0) {
            var resIndex = this.parent.activeViewOptions.group.byDate ? this.parent.resourceBase.lastResourceLevel.length * index + count : count + index;
            currentDateIndex.push(resIndex);
          }

          count += this.parent.activeViewOptions.group.byDate ? 1 : resource.renderDates.length;
        }
      } else {
        var renderDates = this.parent.uiStateValues.isGroupAdaptive && this.parent.resourceBase.lastResourceLevel.length > 0 ? this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex].renderDates : this.renderDates;
        var index = this.parent.getIndexOfDate(renderDates, resetTime(this.parent.getCurrentTime()));

        if (index >= 0) {
          currentDateIndex.push(index);
        }
      }

      return currentDateIndex;
    };

    VerticalViews.prototype.clearCurrentTimeIndicatorTimer = function () {
      if (!sf.base.isNullOrUndefined(this.currentTimeIndicatorTimer)) {
        window.clearInterval(this.currentTimeIndicatorTimer);
        this.currentTimeIndicatorTimer = null;
        this.removeCurrentTimeIndicatorElements();
      }
    };

    VerticalViews.prototype.removeCurrentTimeIndicatorElements = function () {
      var queryString = '.' + PREVIOUS_TIMELINE_CLASS + ',.' + CURRENT_TIMELINE_CLASS + ',.' + CURRENT_TIME_CLASS;
      var timeIndicator = [].slice.call(this.element.querySelectorAll(queryString));

      for (var _i = 0, timeIndicator_1 = timeIndicator; _i < timeIndicator_1.length; _i++) {
        var indicator = timeIndicator_1[_i];
        sf.base.remove(indicator);
      }
    };

    VerticalViews.prototype.changeCurrentTimePosition = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var firstRow = this.parent.getContentTable().rows[0];
      var top = this.getTopFromDateTime(this.parent.getCurrentTime());
      var topInPx = sf.base.formatUnit(top);
      var rowIndex = Math.floor(top / firstRow.cells[0].offsetHeight);

      if (sf.base.isNullOrUndefined(rowIndex) || isNaN(rowIndex)) {
        return;
      }

      var curTimeWrap = [].slice.call(this.element.querySelectorAll('.' + TIMELINE_WRAPPER_CLASS));

      for (var i = 0, length_1 = currentDateIndex[0]; i < length_1; i++) {
        curTimeWrap[i].appendChild(sf.base.createElement('div', {
          className: PREVIOUS_TIMELINE_CLASS,
          styles: 'top:' + topInPx
        }));
      }

      for (var _i = 0, currentDateIndex_1 = currentDateIndex; _i < currentDateIndex_1.length; _i++) {
        var day = currentDateIndex_1[_i];
        curTimeWrap[day].appendChild(sf.base.createElement('div', {
          className: CURRENT_TIMELINE_CLASS,
          styles: 'top:' + topInPx
        }));
      }

      var currentTimeEle = sf.base.createElement('div', {
        //innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS,
        styles: 'top:' + topInPx
      });
      var timeCellsWrap = this.getLeftPanelElement();
      var timeTrs = [].slice.call(timeCellsWrap.querySelectorAll('tr'));

      if (rowIndex <= timeTrs.length) {
        sf.base.removeClass(timeCellsWrap.querySelectorAll('.' + HIDE_CHILDS_CLASS), HIDE_CHILDS_CLASS);
        sf.base.addClass([timeTrs[rowIndex].lastElementChild], HIDE_CHILDS_CLASS);
        sf.base.prepend([currentTimeEle], timeCellsWrap);
        currentTimeEle.style.top = sf.base.formatUnit(currentTimeEle.offsetTop - currentTimeEle.offsetHeight / 2);
      }
    };

    VerticalViews.prototype.getTopFromDateTime = function (date) {
      var startHour = this.getStartHour();
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());
      return diffInMinutes * this.getWorkCellHeight() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };

    VerticalViews.prototype.getWorkCellHeight = function () {
      return this.element.querySelector('.' + WORK_CELLS_CLASS).offsetHeight;
    };

    VerticalViews.prototype.renderLayout = function () {
      this.element = this.parent.element.querySelector('.' + TABLE_WRAP_CLASS); // if (this.parent.uiStateValues.isGroupAdaptive && !this.parent.element.querySelector('.' + cls.RESOURCE_TOOLBAR_CONTAINER)) {
      //     this.renderResourceMobileLayout();
      // }

      var headerCells = [].slice.call(this.element.querySelectorAll('.' + DATE_HEADER_WRAP_CLASS + ' td.' + HEADER_CELLS_CLASS));

      for (var _i = 0, headerCells_1 = headerCells; _i < headerCells_1.length; _i++) {
        var cell = headerCells_1[_i];
        sf.base.EventHandler.clearEvents(cell);
        this.wireMouseEvents(cell);
      }

      var alldayCells = [].slice.call(this.element.querySelectorAll('.' + DATE_HEADER_WRAP_CLASS + ' td.' + ALLDAY_CELLS_CLASS));

      for (var _a = 0, alldayCells_1 = alldayCells; _a < alldayCells_1.length; _a++) {
        var cell = alldayCells_1[_a];
        sf.base.EventHandler.clearEvents(cell);
        this.wireCellEvents(cell);
      }

      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.setTranslateValue();
      }

      var wrap = this.element.querySelector('.' + CONTENT_WRAP_CLASS);
      var contentBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');
      sf.base.EventHandler.clearEvents(contentBody);
      this.wireCellEvents(contentBody);
      sf.base.EventHandler.clearEvents(wrap);
      sf.base.EventHandler.add(wrap, 'scroll', this.onContentScroll, this);
      sf.base.EventHandler.add(wrap, sf.base.Browser.touchMoveEvent, this.onApaptiveMove, this); //this.wireExpandCollapseIconEvents();

      this.parent.setDimensions();
    };

    VerticalViews.prototype.wireCellEvents = function (element) {
      sf.base.EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      this.wireMouseEvents(element);
    };

    VerticalViews.prototype.wireMouseEvents = function (element) {
      sf.base.EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);

      if (!this.parent.isAdaptive) {
        sf.base.EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };

    VerticalViews.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + TIME_CELLS_WRAP_CLASS);
    };

    VerticalViews.prototype.getEndDateFromStartDate = function (start) {
      var msMajorInterval = this.parent.activeViewOptions.timeScale.interval * MS_PER_MINUTE;
      var msInterval = msMajorInterval / this.parent.activeViewOptions.timeScale.slotCount;
      var end = new Date(start.getTime());
      end.setMilliseconds(end.getMilliseconds() + msInterval);
      return end;
    };

    VerticalViews.prototype.destroy = function () {
      this.clearCurrentTimeIndicatorTimer();

      if (this.element) {
        var contentScrollableEle = this.getContentAreaElement();

        if (contentScrollableEle) {
          sf.base.EventHandler.remove(contentScrollableEle, 'scroll', this.onContentScroll);
        }

        this.element = null;
      }
    };

    return VerticalViews;
  }(ViewBase);

  var __extends$1 = undefined && undefined.__extends || function () {
    var _extendStatics2 = function extendStatics(d, b) {
      _extendStatics2 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics2(d, b);
    };

    return function (d, b) {
      _extendStatics2(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * timeline view
   */


  var TimelineViews =
  /** @class */
  function (_super) {
    __extends$1(TimelineViews, _super);

    function TimelineViews(parent) {
      var _this = _super.call(this, parent) || this;

      _this.baseCssClass = 'e-timeline-view';
      return _this;
    }

    TimelineViews.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);
    };

    TimelineViews.prototype.scrollTopPanel = function (target) {
      _super.prototype.scrollTopPanel.call(this, target);

      this.scrollHeaderLabels(target);
    };

    TimelineViews.prototype.scrollToWorkHour = function () {
      var start = this.parent.getStartEndTime(this.parent.options.workHours.start);
      var currDateTime = this.isWorkDay(this.parent.options.selectedDate) && this.parent.options.workHours.highlight && !sf.base.isNullOrUndefined(start) ? new Date(+this.parent.options.selectedDate).setHours(start.getHours(), start.getMinutes(), 0, 0) : new Date(+this.parent.options.selectedDate).setHours(0, 0, 0, 0);
      var queryString = '[data-date="' + this.parent.getMsFromDate(new Date(currDateTime)) + '"]';
      var firstWorkHourCell = this.element.querySelector(queryString);

      if (firstWorkHourCell) {
        this.getContentAreaElement().scrollLeft = firstWorkHourCell.offsetLeft;
      }
    };

    TimelineViews.prototype.scrollToHour = function (hour, scrollDate) {
      var date;
      var index;

      if (scrollDate) {
        index = this.parent.getIndexOfDate(this.renderDates, this.parent.resetTime(scrollDate));

        if (index >= 0) {
          var timeString = hour.split(':');

          if (timeString.length === 2) {
            date = new Date(scrollDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0));
          }
        }
      }

      date = sf.base.isNullOrUndefined(scrollDate) ? this.parent.getStartEndTime(hour) : date;

      if (sf.base.isNullOrUndefined(date)) {
        return;
      }

      this.getContentAreaElement().scrollLeft = sf.base.isNullOrUndefined(scrollDate) ? this.getLeftFromDateTime(null, date) : this.getLeftFromDateTime([index], date);
    };

    TimelineViews.prototype.changeCurrentTimePosition = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.removeCurrentTimeIndicatorElements();
      var currentDateIndex = this.getCurrentTimeIndicatorIndex();
      var left = this.getLeftFromDateTime(currentDateIndex, this.parent.getCurrentTime());
      var height = this.element.querySelector('.' + CONTENT_TABLE_CLASS).offsetHeight;
      var headerWrap = this.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);
      var contentWrap = this.element.querySelector('.' + CONTENT_WRAP_CLASS);
      contentWrap.appendChild(sf.base.createElement('div', {
        className: CURRENT_TIMELINE_CLASS,
        styles: (this.parent.options.enableRtl ? 'right' : 'left') + ':' + sf.base.formatUnit(left) + '; height:' + sf.base.formatUnit(height)
      }));

      if (this.parent.virtualScrollModule) {
        var timeIndicator = this.parent.element.querySelector('.' + CURRENT_TIMELINE_CLASS);
        var element = this.parent.element.querySelector('.' + CONTENT_WRAP_CLASS + ' table');
        sf.base.setStyleAttribute(timeIndicator, {
          transform: element.style.transform
        });
      }

      var currentTimeEle = sf.base.createElement('div', {
        //innerHTML: this.parent.getTimeString(this.parent.getCurrentTime()),
        className: CURRENT_TIME_CLASS
      });
      headerWrap.appendChild(currentTimeEle);
      currentTimeEle.style[this.parent.options.enableRtl ? 'right' : 'left'] = sf.base.formatUnit(left - currentTimeEle.offsetWidth / 2);
    };

    TimelineViews.prototype.getLeftFromDateTime = function (currentDateIndex, date) {
      var startHour = this.getStartHour();
      var endHour = this.getEndHour();
      var diffInDates = 0;
      var diffInMinutes = (date.getHours() - startHour.getHours()) * 60 + (date.getMinutes() - startHour.getMinutes());

      if (!sf.base.isNullOrUndefined(currentDateIndex)) {
        var end = endHour.getHours() === 0 ? 24 : endHour.getHours();

        if (currentDateIndex[0] !== 0) {
          diffInDates = currentDateIndex[0] * ((end - startHour.getHours()) * 60) + (endHour.getMinutes() - startHour.getMinutes());
        }

        diffInMinutes = diffInDates + diffInMinutes;
      }

      return diffInMinutes * this.getWorkCellWidth() * this.parent.activeViewOptions.timeScale.slotCount / this.parent.activeViewOptions.timeScale.interval;
    };

    TimelineViews.prototype.getWorkCellWidth = function () {
      return this.element.querySelector('.e-work-cells').getBoundingClientRect().width;
    };

    TimelineViews.prototype.getCurrentTimeIndicatorIndex = function () {
      var currentDateIndex = [];
      var index = this.parent.getIndexOfDate(this.renderDates, this.parent.resetTime(this.parent.getCurrentTime()));

      if (index >= 0) {
        currentDateIndex.push(index);
      }

      return currentDateIndex;
    };

    TimelineViews.prototype.renderEvents = function () {// if (this.parent.activeViewOptions.timeScale.enable) {
      //     let appointment: TimelineEvent = new TimelineEvent(this.parent, 'hour');
      //     appointment.renderAppointments();
      // } else {
      //     let appointment: TimelineEvent = new TimelineEvent(this.parent, 'day');
      //     appointment.renderAppointments();
      // }
    };

    return TimelineViews;
  }(VerticalViews);

  var __extends$2 = undefined && undefined.__extends || function () {
    var _extendStatics3 = function extendStatics(d, b) {
      _extendStatics3 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics3(d, b);
    };

    return function (d, b) {
      _extendStatics3(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * month view
   */


  var Month =
  /** @class */
  function (_super) {
    __extends$2(Month, _super);
    /**
     * Constructor for month view
     */


    function Month(parent) {
      var _this = _super.call(this, parent) || this;

      _this.dayNameFormat = 'wide';
      _this.isInverseTableSelect = false;
      _this.monthDates = {};
      return _this;
    }

    Month.prototype.onDataReady = function (args) {// let monthEvent: MonthEvent = new MonthEvent(this.parent);
      // monthEvent.renderAppointments();
    };

    Month.prototype.onContentScroll = function (e) {
      this.parent.removeNewEventElement();
      this.parent.onVirtualScroll();
      this.scrollTopPanel(e.target);
      this.scrollLeftPanel(e.target);
    };

    Month.prototype.scrollLeftPanel = function (target) {
      var leftPanel = this.getLeftPanelElement();

      if (leftPanel) {
        leftPanel.scrollTop = target.scrollTop;
      }
    };

    Month.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + WEEK_NUMBER_WRAPPER_CLASS);
    };

    Month.prototype.onScrollUiUpdate = function (args) {
      var headerHeight = this.getHeaderBarHeight();
      var header = this.getDatesHeaderElement();
      var content = this.getContentAreaElement();
      var height = this.parent.element.offsetHeight - headerHeight - header.offsetHeight;
      var leftPanel = this.getLeftPanelElement();
      this.setContentHeight(content, leftPanel, height);
      var scrollBarWidth = getScrollBarWidth(); // tslint:disable:no-any

      header.firstElementChild.style[args.cssProperties.rtlBorder] = '';
      header.style[args.cssProperties.rtlPadding] = '';

      if (content.offsetWidth - content.clientWidth > 0) {
        header.firstElementChild.style[args.cssProperties.border] = scrollBarWidth > 0 ? '1px' : '0px';
        header.style[args.cssProperties.padding] = scrollBarWidth > 0 ? scrollBarWidth - 1 + 'px' : '0px';
      } else {
        header.firstElementChild.style[args.cssProperties.border] = '';
        header.style[args.cssProperties.padding] = '';
      } // tslint:enable:no-any


      this.setColWidth(content);

      if (args.scrollPosition) {
        if (leftPanel) {
          leftPanel.scrollTop = args.scrollPosition.top;
        }

        content.scrollTop = args.scrollPosition.top;
        content.scrollLeft = args.scrollPosition.left;
      } else {
        var headerCell = document.querySelector('.' + HEADER_CELLS_CLASS + '[data-date="' + this.parent.getMsFromDate(this.parent.options.selectedDate) + '"]');
        content.scrollLeft = headerCell !== null ? headerCell.offsetLeft : 0;
      }
    };

    Month.prototype.setContentHeight = function (content, leftPanelElement, height) {
      content.style.height = 'auto';

      if (this.parent.options.currentView === 'Month') {
        content.style.height = sf.base.formatUnit(height);
      }

      if (leftPanelElement) {
        if (this.parent.options.currentView === 'MonthAgenda') {
          height = this.element.querySelector('.' + CONTENT_TABLE_CLASS).offsetHeight;
        }

        leftPanelElement.style.height = 'auto';
        leftPanelElement.style.height = sf.base.formatUnit(height - this.getScrollXIndent(content));
      }
    };

    Month.prototype.serverRenderLayout = function () {
      var curElem = [].slice.call(this.parent.element.querySelectorAll('.' + CURRENT_DAY_CLASS));

      if (curElem.length > 0) {
        sf.base.removeClass(curElem, CURRENT_DAY_CLASS);
      }

      var curDate = addLocalOffset(new Date(new Date().setHours(0, 0, 0, 0)));
      var queryString = '.' + WORK_CELLS_CLASS + '[data-date="' + curDate.getTime().toString() + '"]';

      if (this.parent.options.currentView === 'Month' || this.parent.options.currentView === 'MonthAgenda') {
        curElem = [].slice.call(this.parent.element.querySelectorAll('.' + CURRENTDATE_CLASS));

        if (curElem.length > 0) {
          sf.base.removeClass(curElem, CURRENTDATE_CLASS);
        }

        var curEle = [].slice.call(this.parent.element.querySelectorAll(queryString));

        for (var _i = 0, curEle_1 = curEle; _i < curEle_1.length; _i++) {
          var ele = curEle_1[_i];
          var index = ele.cellIndex;
          var curHeader = [].slice.call(this.parent.element.querySelectorAll('.' + HEADER_CELLS_CLASS))[index];
          sf.base.addClass([ele], CURRENTDATE_CLASS);
          sf.base.addClass([curHeader], CURRENT_DAY_CLASS);
        }
      }

      if (this.parent.options.currentView === 'TimelineMonth') {
        var curEle = this.parent.element.querySelector('.' + HEADER_CELLS_CLASS + '[data-date="' + curDate.getTime().toString() + '"]');

        if (!sf.base.isNullOrUndefined(curEle)) {
          sf.base.addClass([curEle], CURRENT_DAY_CLASS);
        }
      }

      this.element = this.parent.element.querySelector('.' + TABLE_WRAP_CLASS);
      var headerCells = [].slice.call(this.element.querySelectorAll('.' + DATE_HEADER_WRAP_CLASS + ' td.' + HEADER_CELLS_CLASS));

      for (var _a = 0, headerCells_1 = headerCells; _a < headerCells_1.length; _a++) {
        var cell = headerCells_1[_a];
        sf.base.EventHandler.clearEvents(cell);
        this.wireCellEvents(cell);
      }

      var contentBody = this.element.querySelector('.' + CONTENT_TABLE_CLASS + ' tbody');
      sf.base.EventHandler.clearEvents(contentBody);
      this.wireCellEvents(contentBody);

      if (this.parent.virtualScrollModule) {
        this.parent.virtualScrollModule.setTranslateValue();
      }

      var wrap = this.element.querySelector('.' + CONTENT_WRAP_CLASS);
      sf.base.EventHandler.clearEvents(wrap);
      sf.base.EventHandler.add(wrap, 'scroll', this.onContentScroll, this); // this.wireExpandCollapseIconEvents();

      this.renderAppointmentContainer(); // if (this.parent.uiStateValues.isGroupAdaptive && !target.querySelector('.' + cls.RESOURCE_TOOLBAR_CONTAINER)) {
      //     this.renderResourceMobileLayout();
      // }

      this.parent.setDimensions();
    };

    Month.prototype.renderLayout = function () {
      // this.dayNameFormat = this.getDayNameFormat();
      //this.colLevels = this.generateColumnLevels();
      if (this.parent.isTimelineView() && this.parent.resourceBase && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
        this.parent.resourceBase.setRenderedResources();
      }

      this.serverRenderLayout();
    };

    Month.prototype.wireCellEvents = function (element) {
      sf.base.EventHandler.add(element, 'mousedown', this.parent.workCellAction.cellMouseDown, this.parent.workCellAction);
      sf.base.EventHandler.add(element, 'click', this.parent.workCellAction.cellClick, this.parent.workCellAction);

      if (!this.parent.isAdaptive) {
        sf.base.EventHandler.add(element, 'dblclick', this.parent.workCellAction.cellDblClick, this.parent.workCellAction);
      }
    };

    Month.prototype.renderAppointmentContainer = function () {//Here needs to render mobile view appointment details on selected date
    };

    Month.prototype.getMonthStart = function (currentDate) {
      var monthStart = getWeekFirstDate(firstDateOfMonth(currentDate), this.parent.activeViewOptions.firstDayOfWeek);
      var start = new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
      return start;
    };

    Month.prototype.getMonthEnd = function (currentDate) {
      var endDate = addMonths(currentDate, this.parent.activeViewOptions.interval - 1);
      var lastWeekOfMonth = getWeekFirstDate(lastDateOfMonth(endDate), this.parent.activeViewOptions.firstDayOfWeek);
      var monthEnd = addDays(lastWeekOfMonth, WEEK_LENGTH - 1);
      return monthEnd;
    };

    Month.prototype.getRenderDates = function (workDays) {
      var renderDates = [];
      var currentDate = resetTime(this.parent.options.selectedDate);
      var start = this.getMonthStart(currentDate);
      var monthEnd = this.getMonthEnd(currentDate);

      do {
        if (this.parent.activeViewOptions.showWeekend) {
          renderDates.push(start);
        } else {
          if (this.isWorkDay(start, workDays)) {
            renderDates.push(start);
          }
        }

        start = addDays(start, 1);
      } while (start.getTime() <= monthEnd.getTime());

      if (!workDays) {
        this.renderDates = renderDates;
      } // if (this.parent.headerModule) {
      //     this.parent.headerModule.previousNextIconHandler();
      // }


      return renderDates;
    };

    Month.prototype.getEndDateFromStartDate = function (start) {
      return addDays(new Date(start.getTime()), 1);
    };

    Month.prototype.destroy = function () {
      if (this.parent.isDestroyed) {
        return;
      }

      this.element = null;
    };

    return Month;
  }(ViewBase);

  var __extends$3 = undefined && undefined.__extends || function () {
    var _extendStatics4 = function extendStatics(d, b) {
      _extendStatics4 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics4(d, b);
    };

    return function (d, b) {
      _extendStatics4(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * month agenda view
   */


  var MonthAgenda =
  /** @class */
  function (_super) {
    __extends$3(MonthAgenda, _super);
    /**
     * Constructor
     */


    function MonthAgenda(parent) {
      var _this = _super.call(this, parent) || this;

      _this.dayNameFormat = 'narrow';
      _this.agendaDates = {}; // this.agendaBase = new AgendaBase(parent);

      _this.monthAgendaDate = new Date('' + parent.options.selectedDate);
      return _this;
    }

    MonthAgenda.prototype.renderAppointmentContainer = function () {
      this.setEventWrapperHeight();
    };

    MonthAgenda.prototype.setEventWrapperHeight = function () {
      var headerHeight = this.getHeaderBarHeight(true);
      var contentArea = this.getContentAreaElement().firstElementChild;
      var dateHeader = this.element.querySelector('.' + DATE_HEADER_WRAP_CLASS);
      var availableHeight = this.parent.element.offsetHeight - headerHeight - dateHeader.offsetHeight - contentArea.offsetHeight;
      var wrapperContainer = this.element.querySelector('.' + WRAPPER_CONTAINER_CLASS);
      var eventWrapper = this.element.querySelector('.' + APPOINTMENT_WRAP_CLASS);
      wrapperContainer.style.height = eventWrapper.style.height = sf.base.formatUnit(availableHeight);
    };

    MonthAgenda.prototype.onDataReady = function (args) {// this.setEventWrapperHeight();
      // this.clearElements();
      // let eventCollection: Object[] = args.processedData;
      // if (this.parent.uiStateValues.isGroupAdaptive) {
      //     let resource: TdData = this.parent.resourceBase.lastResourceLevel[this.parent.uiStateValues.groupIndex];
      //     eventCollection = this.parent.eventBase.filterEventsByResource(resource, eventCollection);
      // }
      // this.parent.eventsProcessed = this.agendaBase.processAgendaEvents(eventCollection);
      // let count: number = 0;
      // for (let date of this.renderDates) {
      //     let filterData: Object[] = this.appointmentFiltering(date);
      //     let workCell: Element = this.element.querySelectorAll('.' + cls.WORK_CELLS_CLASS)[count];
      //     if (filterData.length > 0) {
      //         if (!workCell.querySelector('.' + cls.APPOINTMENT_INDICATOR_CLASS)) {
      //             workCell.appendChild(createElement('div', { className: cls.APPOINTMENT_INDICATOR_CLASS }));
      //         }
      //         if (date.getTime() === util.resetTime(new Date(this.monthAgendaDate.getTime())).getTime()) {
      //             this.onEventRender(filterData, date);
      //         }
      //     }
      //     count++;
      // }
    };

    MonthAgenda.prototype.onCellClick = function (event) {
      // this.parent.quickPopup.quickPopupHide();
      // let filterData: Object[] = this.appointmentFiltering(event.startTime);
      // this.onEventRender(filterData, event.startTime);
      this.monthAgendaDate = new Date('' + event.startTime);
    };

    return MonthAgenda;
  }(Month);

  var __extends$4 = undefined && undefined.__extends || function () {
    var _extendStatics5 = function extendStatics(d, b) {
      _extendStatics5 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (b.hasOwnProperty(p)) d[p] = b[p];
        }
      };

      return _extendStatics5(d, b);
    };

    return function (d, b) {
      _extendStatics5(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }();
  /**
   * timeline month view
   */


  var TimelineMonth =
  /** @class */
  function (_super) {
    __extends$4(TimelineMonth, _super);

    function TimelineMonth(parent) {
      var _this = _super.call(this, parent) || this;

      _this.isInverseTableSelect = true;
      return _this;
    }

    TimelineMonth.prototype.onDataReady = function (args) {// let appointment: TimelineEvent = new TimelineEvent(this.parent, 'day');
      // appointment.renderAppointments();
    };

    TimelineMonth.prototype.getLeftPanelElement = function () {
      return this.element.querySelector('.' + RESOURCE_COLUMN_WRAP_CLASS);
    };

    TimelineMonth.prototype.scrollTopPanel = function (target) {
      _super.prototype.scrollTopPanel.call(this, target);

      this.scrollHeaderLabels(target);
    };

    TimelineMonth.prototype.setContentHeight = function (content, leftPanelElement, height) {
      if (leftPanelElement) {
        leftPanelElement.style.height = sf.base.formatUnit(height - this.getScrollXIndent(content));
      }

      content.style.height = sf.base.formatUnit(height);
    };

    TimelineMonth.prototype.getMonthStart = function (currentDate) {
      var monthStart = firstDateOfMonth(resetTime(currentDate));
      return new Date(monthStart.getFullYear(), monthStart.getMonth(), monthStart.getDate());
    };

    TimelineMonth.prototype.getMonthEnd = function (currentDate) {
      var monthStart = firstDateOfMonth(resetTime(currentDate));
      return lastDateOfMonth(addMonths(new Date(+monthStart), this.parent.activeViewOptions.interval - 1));
    };

    return TimelineMonth;
  }(Month);
  /**
   * Schedule base class
   */


  var SfSchedule =
  /** @class */
  function () {
    // tslint:enable:no-any
    function SfSchedule(element, options, viewOptions, dotnetRef) {
      this.element = element;
      this.element.blazor__instance = this;
      this.dotNetRef = dotnetRef;
      this.options = options;
      this.activeViewOptions = viewOptions;
      this.isAdaptive = sf.base.Browser.isDevice;
      this.uiStateValues = {
        expand: false,
        isInitial: true,
        left: 0,
        top: 0,
        isGroupAdaptive: false,
        isIgnoreOccurrence: false,
        groupIndex: 0,
        action: false,
        isBlock: false
      };
      this.render();
    }

    SfSchedule.prototype.render = function () {
      var addClasses = [];
      var removeClasses = [];
      addClasses.push(ROOT);

      if (this.options.enableRtl) {
        addClasses.push(RTL);
      } else {
        removeClasses.push(RTL);
      }

      if (this.isAdaptive) {
        addClasses.push(DEVICE_CLASS);
      } else {
        removeClasses.push(DEVICE_CLASS);
      }

      if (this.options.cssClass) {
        addClasses.concat(this.options.cssClass.split(' '));
      }

      sf.base.classList(this.element, addClasses, removeClasses);
      this.setWidth();
      this.setHeight();
      this.workCellAction = new WorkCellInteraction(this);
      this.initializeLayout(this.options.currentView); // this.eventBase = new EventBase(this);
      // this.workCellAction = new WorkCellInteraction(this);
      // if (this.allowKeyboardInteraction) {
      //     this.keyboardInteractionModule = new KeyboardInteraction(this);
      // }
      // this.inlineModule = new InlineEdit(this);
      // this.initializeDataModule();
      // this.initializeResources();

      this.wireEvents();
    };

    SfSchedule.prototype.initializeLayout = function (viewName) {
      if (this.activeView) {
        this.activeView.destroy();
      }

      switch (viewName) {
        case 'Day':
        case 'Week':
        case 'WorkWeek':
          this.activeView = new VerticalViews(this);
          break;

        case 'TimelineDay':
        case 'TimelineWorkWeek':
        case 'TimelineWeek':
          this.activeView = new TimelineViews(this);
          break;

        case 'Month':
          this.activeView = new Month(this);
          break;

        case 'MonthAgenda':
          this.activeView = new MonthAgenda(this);
          break;

        case 'TimelineMonth':
          this.activeView = new TimelineMonth(this);
          break;
      }

      if (!this.activeView) {
        return;
      }

      this.activeView.getRenderDates();
      this.activeView.renderLayout(); // this.parent.uiStateValues.isGroupAdaptive = this.parent.isAdaptive && this.parent.activeViewOptions.group.resources.length > 0 &&
      //     this.parent.activeViewOptions.group.enableCompactView;
      // if (this.parent.virtualScrollModule) {
      //     this.parent.virtualScrollModule = null;
      // }
      // if (this.parent.currentView.indexOf('Timeline') !== -1 && this.parent.activeViewOptions.allowVirtualScrolling
      //     && this.parent.activeViewOptions.group.resources.length > 0 && !this.parent.uiStateValues.isGroupAdaptive) {
      //     this.parent.virtualScrollModule = new VirtualScroll(this.parent);
      //     this.parent.uiStateValues.top = 0;
      // }
    };

    SfSchedule.prototype.isTimelineView = function () {
      return this.options.currentView.indexOf('Timeline') !== -1;
    };

    SfSchedule.prototype.getMsFromDate = function (date) {
      return new Date(+date - date.getTimezoneOffset() * 60000).getTime();
    };

    SfSchedule.prototype.getStartEndTime = function (startEndTime) {
      if (!sf.base.isNullOrUndefined(startEndTime) && startEndTime !== '') {
        var startEndDate = this.resetTime(this.getCurrentTime());
        var timeString = startEndTime.split(':');

        if (timeString.length === 2) {
          startEndDate.setHours(parseInt(timeString[0], 10), parseInt(timeString[1], 10), 0);
        }

        return startEndDate;
      }

      return null;
    };

    SfSchedule.prototype.resetTime = function (date) {
      return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    };

    SfSchedule.prototype.getCurrentTime = function () {
      // if (this.timezone) {
      //     let localOffset: number & string = new Date().getTimezoneOffset() as number & string;
      //     return this.tzModule.convert(new Date(), localOffset, this.timezone as number & string);
      // }
      return new Date();
    };

    SfSchedule.prototype.onCellMouseDown = function (e) {
      if (this.keyboardInteractionModule) {
        this.keyboardInteractionModule.onCellMouseDown(e);
      }
    };

    SfSchedule.prototype.getContentTable = function () {
      return this.element.querySelector('.e-content-table tbody');
    };

    SfSchedule.prototype.getIndexOfDate = function (collection, date) {
      return collection.map(Number).indexOf(+date);
    };

    SfSchedule.prototype.setWidth = function () {
      this.element.style.width = sf.base.formatUnit(this.options.width);
    };

    SfSchedule.prototype.setHeight = function () {
      this.element.style.height = sf.base.formatUnit(this.options.height);
    };

    SfSchedule.prototype.setDimensions = function () {
      this.setWidth();
      this.setHeight();
      var data = {
        cssProperties: this.getCssProperties()
      };
      this.onScrollUiUpdate(data);
    };

    SfSchedule.prototype.getCssProperties = function () {
      var cssProps = {
        border: this.options.enableRtl ? 'borderLeftWidth' : 'borderRightWidth',
        padding: this.options.enableRtl ? 'paddingLeft' : 'paddingRight',
        rtlBorder: this.options.enableRtl ? 'borderRightWidth' : 'borderLeftWidth',
        rtlPadding: this.options.enableRtl ? 'paddingRight' : 'paddingLeft'
      };
      return cssProps;
    };

    SfSchedule.prototype.onScrollUiUpdate = function (args) {
      if (this.activeView) {
        this.activeView.onScrollUiUpdate(args);
      }
    };

    SfSchedule.prototype.onVirtualScroll = function () {
      if (this.virtualScrollModule) {
        this.virtualScrollModule.virtualScrolling();
      }
    };

    SfSchedule.prototype.removeNewEventElement = function () {
      var eventClone = this.element.querySelector('.e-new-event');

      if (!sf.base.isNullOrUndefined(eventClone)) {
        sf.base.remove(eventClone);
      }
    };

    SfSchedule.prototype.closeSidebar = function (e) {
      var sidebar = this.element.querySelector('.e-sidebar');

      if (sf.base.closest(e.target, '.e-icon-menu,.e-sidebar') && sidebar && sidebar.classList.contains('e-open')) {
        e.preventDefault();
        return;
      }
    };

    SfSchedule.prototype.closeHeaderPopup = function (e) {
      var closestEle = sf.base.closest(e.target, '.e-date-range,.e-header-popup,.e-day,.e-selected');
      var element = this.element.querySelector('.e-header-popup');

      if (!sf.base.isNullOrUndefined(closestEle)) {
        return;
      }

      if (element && this.headerPopup) {
        this.headerPopup.hide();
      }
    };

    SfSchedule.prototype.createCalendarPopup = function () {
      var headerPopupEle = this.element.querySelector('.e-header-popup');

      if (headerPopupEle && !this.headerPopup) {
        this.headerPopup = new sf.popups.Popup(headerPopupEle, {
          actionOnScroll: 'hide',
          targetType: 'relative',
          relateTo: this.isAdaptive ? this.element.querySelector('.e-schedule-toolbar') : this.element.querySelector('.e-date-range'),
          position: {
            X: 'left',
            Y: 'bottom'
          },
          enableRtl: this.options.enableRtl
        });
        this.headerPopup.isStringTemplate = true;
      }

      if (this.headerPopup) {
        if (this.headerPopup.element.classList.contains(POPUP_OPEN)) {
          this.headerPopup.hide();
        } else {
          this.headerPopup.show();
        }
      }
    };

    SfSchedule.prototype.getTooltipPosition = function (fieldName) {
      var dlgContent = this.element.querySelector('.e-schedule-dialog .e-dlg-content');
      var fieldEle = this.element.querySelector('#' + fieldName);
      var inputClient = fieldEle.getBoundingClientRect();
      var dlgClient = dlgContent.getBoundingClientRect();
      var toolTipPos = {
        fieldName: 'top:' + (inputClient.bottom - dlgClient.top + dlgContent.scrollTop + 9) + 'px;left:' + (inputClient.left - dlgClient.left + dlgContent.scrollLeft + inputClient.width / 2) + 'px;'
      };
      this.dotNetRef.invokeMethodAsync('ShowValidationPopup', toolTipPos);
    };

    SfSchedule.prototype.wireEvents = function () {
      sf.base.EventHandler.add(window, 'resize', this.onScheduleResize, this);
      sf.base.EventHandler.add(window, 'orientationchange', this.onScheduleResize, this);
      sf.base.EventHandler.add(document, sf.base.Browser.touchStartEvent, this.onDocumentClick, this);
    };

    SfSchedule.prototype.unwireEvents = function () {
      sf.base.EventHandler.remove(window, 'resize', this.onScheduleResize);
      sf.base.EventHandler.remove(window, 'orientationchange', this.onScheduleResize);
      sf.base.EventHandler.remove(document, sf.base.Browser.touchStartEvent, this.onDocumentClick);
    };

    SfSchedule.prototype.onScheduleResize = function () {
      if (this.quickPopup) {
        this.quickPopup.onClosePopup();
      }

      if (this.options.currentView === 'Month' || !this.activeViewOptions.timeScale.enable || this.isTimelineView()) {
        this.activeView.resetColWidth(); // this.notify(events.scrollUiUpdate, { cssProperties: this.getCssProperties(), isPreventScrollUpdate: true });
        // this.notify(events.dataReady, {});
      }
    };

    SfSchedule.prototype.onDocumentClick = function (e) {
      this.closeHeaderPopup(e);
      this.closeSidebar(e); //this.notify(events.documentClick, { event: args });
    };

    SfSchedule.prototype.destroy = function () {
      this.isDestroyed = true;
      this.unwireEvents();
    };

    return SfSchedule;
  }(); // tslint:disable


  var Schedule = {
    initialize: function initialize(element, options, viewOptions, dotnetRef) {
      options.selectedDate = new Date(options.selectedDate);
      new SfSchedule(element, options, viewOptions, dotnetRef);
    },
    createCalendarPopup: function createCalendarPopup(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.createCalendarPopup();
      }
    },
    exportSave: function exportSave(fileName, fileType) {
      if (navigator.msSaveBlob) {
        //Download document in Edge browser
        var data = window.atob(fileType);
        var bytes = new Uint8Array(data.length);

        for (var i = 0; i < data.length; i++) {
          bytes[i] = data.charCodeAt(i);
        }

        var blob = new Blob([bytes.buffer], {
          type: 'application/octet-stream'
        });
        navigator.msSaveBlob(blob, fileName);
      } else {
        var link = document.createElement('a');
        link.download = fileName;
        link.href = 'data:application/octet-stream;base64,' + fileType;
        document.body.appendChild(link); // Needed for Firefox

        link.click();
        document.body.removeChild(link);
      }
    },
    destroy: function destroy(element) {
      if (element && element.blazor__instance) {
        element.blazor__instance.destroy();
      }
    },
    validation: function validation(element, fieldName) {
      if (element && element.blazor__instance) {
        element.blazor__instance.getTooltipPosition(fieldName);
      }
    }
  };
  return Schedule;
}();

/***/ })

}]);