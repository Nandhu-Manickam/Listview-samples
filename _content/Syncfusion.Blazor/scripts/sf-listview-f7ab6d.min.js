(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-listview"],{

/***/ "./bundles/sf-listview.js":
/*!********************************!*\
  !*** ./bundles/sf-listview.js ***!
  \********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_listview_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-listview.js */ "./modules/sf-listview.js");
/* harmony import */ var _modules_sf_listview_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_listview_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-listview.js":
/*!********************************!*\
  !*** ./modules/sf-listview.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};

window.sfBlazor.ListView = function () {
  'use strict'; // Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];

  var effectsConfig = {
    'None': [],
    'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],
    'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],
    'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],
    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
  };
  var effectsRTLConfig = {
    'None': [],
    'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],
    'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],
    'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],
    'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']
  };
  var swipeVelocity = 0.5;
  var dataSource_Key = 'defaultData_Key';
  var hover = 'e-hover';
  var selected = 'e-active';
  var focused = 'e-focused';
  var listItem = 'e-list-item';
  var groupListItem = 'e-list-group-item';
  var hasChild = 'e-has-child';
  var header = 'e-list-header';
  var headerText = 'e-headertext';
  var disable = 'e-disabled';
  var backIcon = 'e-icon-back';
  var checkboxWrapper = 'e-checkbox-wrapper';
  var checked = 'e-check';
  var checkboxIcon = 'e-frame';
  var virtualUlContainer = "e-list-virtualcontainer";

  var sfListView =
  /** @class */
  function () {
    function sfListView(element, dotnetRef, properties, eventList) {
      this.dataSourceLevel = [dataSource_Key];
      this.curDSKey = dataSource_Key;
      this.isWindow = false;
      this.liElementDifference = 0;
      this.liElementHeight = 0;
      this.virtualListDifference = 0;
      this.element = element;
      this.dotNetRef = dotnetRef;
      this.showCheckBox = properties.ShowCheckBox;
      this.showHeader = properties.ShowHeader;
      this.enable = properties.Enable;
      this.curUL = element.querySelector('ul');
      this.enableVirtualization = properties.EnableVirtualization;
      this.isWindow = properties.IsWindow;
      this.eventLists = eventList;
      this.height = properties.Height;
      this.headerTitleInfo = [properties.HeaderTitle];
      this.selectedItems = {
        defaultData_Key: properties.SelectedElementIdInfo
      };
      this.enableRtl = properties.EnableRtl;
      this.animation = properties.Animation;
      this.element.blazor__instance = this;
      this.isTemplate = properties.IsTemplate;
    }

    sfListView.prototype.initialize = function () {
      if (this.enableVirtualization) {
        if (this.isWindow) {
          this.dotNetRef.invokeMethodAsync('GetComponenetHeight', window.innerHeight);
        } else if (this.height.indexOf("%") !== -1) {
          var parentContainerHeight = this.element.parentElement.getBoundingClientRect().height;
          this.dotNetRef.invokeMethodAsync('GetComponenetHeight', parentContainerHeight / 100 * parseFloat(this.height));
        }

        this.updateLiElementHeight();
      }

      this.headerElement = this.element.querySelector('.' + headerText);
      this.aniObj = new sf.base.Animation(this.animateOptions);
      this.wireEvents();
    };

    sfListView.prototype.wireEvents = function () {
      sf.base.EventHandler.add(this.element, 'keydown', this.keyActionHandler, this);
      sf.base.EventHandler.add(this.element, 'click', this.clickHandler, this);
      sf.base.EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);
      sf.base.EventHandler.add(this.element, 'mouseout', this.mouseOutHandleer, this);
      this.touchModule = new sf.base.Touch(this.element, {
        swipe: this.swipeActionHandler.bind(this)
      });

      if (this.enableVirtualization) {
        sf.base.EventHandler.add(this.element, 'scroll', this.ScrollHandler, this);
        if (this.isWindow) window.addEventListener('scroll', this.ScrollHandler.bind(this));
      }
    };

    sfListView.prototype.swipeActionHandler = function (e) {
      if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {
        if (this.showCheckBox && this.dataSourceLevel[this.dataSourceLevel.length - 1]) {
          this.uncheckAllItems();
        }

        this.back();
      }
    };

    sfListView.prototype.showHideItem = function (item, display) {
      if (this.element) {
        var li = this.element.querySelector('[data-uid="' + item.id + '"]');

        if (li) {
          li.style.display = display;
        }
      }
    };

    sfListView.prototype.enableState = function (item, isEnable) {
      if (this.element) {
        var li = this.element.querySelector('[data-uid="' + item.id + '"]');

        if (isEnable) {
          if (li) {
            li.classList.remove('e-disabled');
          }
        } else if (!isEnable) {
          if (li) {
            li.classList.add('e-disabled');
          }
        }
      }
    };

    sfListView.prototype.ScrollHandler = function (e) {
      var listDiff;

      if (!this.liElementHeight) {
        this.updateLiElementHeight();
      }

      if (this.isWindow) {
        listDiff = Math.round(e.target.documentElement.scrollTop / this.liElementHeight);
      } else {
        listDiff = Math.round(e.target.scrollTop / this.liElementHeight);
      }

      if (listDiff - this.liElementDifference >= this.virtualListDifference || listDiff - this.liElementDifference <= -1) {
        var focuseElement = this.curUL.querySelector('.' + focused);

        if (focuseElement) {
          this.focusedElementId = focuseElement.getAttribute("data-uid");
        }

        var virtualElementContainer = this.element.querySelector('.' + virtualUlContainer);

        if ((listDiff - 1) * this.liElementHeight < 0) {
          virtualElementContainer.style.top = '0px';
        } else {
          virtualElementContainer.style.top = (listDiff - 2) * this.liElementHeight + 'px';
        }

        this.liElementDifference = listDiff;
        this.dotNetRef.invokeMethodAsync('VirtualScrolling', listDiff - 2);
      }
    };

    sfListView.prototype.updateLiElementHeight = function () {
      var LiElement = this.element.querySelector('.' + virtualUlContainer).children[0];

      if (LiElement) {
        this.liElementHeight = LiElement.getBoundingClientRect().height;
        this.dotNetRef.invokeMethodAsync('UpdateLiElementHeight', this.liElementHeight);
      }
    };

    sfListView.prototype.updateElementDifference = function (ListDifference) {
      this.virtualListDifference = ListDifference;
    };

    sfListView.prototype.selectItem = function (item) {
      var liItem = this.element.querySelector('[data-uid="' + item.id + '"]');

      if (this.showCheckBox) {
        this.SetChecked(liItem, liItem.querySelector('.' + checkboxWrapper));
      } else {
        sf.base.isNullOrUndefined(liItem) ? this.removeSelect() : this.setSelectLI(liItem, null);
      }
    };

    sfListView.prototype.clickHandler = function (e) {
      var target = e.target;
      var classList = target.classList;

      if (classList.contains(backIcon) && !classList.contains(headerText)) {
        this.back();
      } else {
        var li = sf.base.closest(target.parentNode, '.' + listItem);

        if (li === null) {
          li = target;
        }

        if (!li.classList.contains(disable)) {
          this.removeFocus();

          if (!this.showCheckBox) {
            if (this.curUL.querySelector('.' + selected)) {
              this.curUL.querySelector('.' + selected).classList.remove(selected);
            }

            if (li.classList.contains(hasChild)) {
              this.setSelectLI(li, e);
            } else {
              li.classList.add(selected);
              this.selectedItems[this.curDSKey][0] = li.getAttribute('data-uid');
            }
          } else {
            if (e.target.classList.contains(checkboxIcon)) {
              li.classList.add(focused);

              if (!li.querySelector('.' + checked)) {
                this.SetChecked(li, li.querySelector('.' + checkboxWrapper));
              } else {
                this.uncheckItem(li);
              }
            } else if (li.classList.contains(hasChild)) {
              this.removeHover();
              this.removeSelect();
              this.setSelectLI(li, e);
            } else {
              li.classList.add(focused);

              if (!li.querySelector('.' + checked)) {
                this.SetChecked(li, li.querySelector('.' + checkboxWrapper));
              } else {
                this.uncheckItem(li);
              }
            }
          }

          if (this.eventLists.onSelect) {
            var Checked = li.querySelector('.' + checked) ? true : false;
            var args = {
              ElementId: li.getAttribute('data-uid'),
              isChecked: Checked,
              Key: this.curDSKey,
              Item: this.getDOMObject('liElement', li),
              Event: this.getMouseEvtArgs(e)
            };
            this.dotNetRef.invokeMethodAsync('TriggerSelectEvent', args);
          }
        }
      }
    };

    sfListView.prototype.getMouseEvtArgs = function (e) {
      return {
        altKey: e.altKey,
        button: e.button,
        buttons: e.buttons,
        clientX: e.clientX,
        clientY: e.clientY,
        ctrlKey: e.ctrlKey,
        detail: e.detail,
        metaKey: e.metaKey,
        screenX: e.screenX,
        screenY: e.screenY,
        shittKey: e.shiftKey,
        type: e.type
      };
    };

    sfListView.prototype.getDOMObject = function (value, element) {
      if (element != null) {
        // tslint:disable
        var domValues = window.sfBlazor.getDomObject(value, element); // tslint:enable

        return {
          ID: domValues.id,
          XPath: domValues.xPath,
          DomUUID: domValues.domUUID,
          ParentID: this.element.getAttribute('id')
        };
      } else {
        return null;
      }
    };

    sfListView.prototype.back = function () {
      if (this.dataSourceLevel.length > 1) {
        var ulElement = this.element.querySelectorAll('ul');

        for (var i = 0; i < ulElement.length; i++) {
          if (this.dataSourceLevel.length > 2) {
            if (ulElement[i].getAttribute('pid') == this.dataSourceLevel[this.dataSourceLevel.length - 2]) {
              this.switchView(this.curUL, ulElement[i], true);
              this.curUL = ulElement[i];
            } else {
              ulElement[i].style.display = 'none';
            }
          } else {
            if (ulElement[i].getAttribute('pid') == null) {
              this.switchView(this.curUL, ulElement[i], true);
              this.curUL = ulElement[i];
            } else {
              ulElement[i].style.display = 'none';
            }
          }
        }

        this.dataSourceLevel.pop();

        if (!this.isTemplate) {
          this.headerTitleInfo.pop();
          this.updateHeaderTitle(this.headerTitleInfo[this.headerTitleInfo.length - 1]);
        }

        this.curDSKey = this.dataSourceLevel[this.dataSourceLevel.length - 1];

        if (this.dataSourceLevel.length == 1) {
          this.element.querySelector('.' + header).children[0].style.display = 'none';
        }
      }
    };

    sfListView.prototype.setHoverLI = function (li) {
      li.classList.add(hover);
    };

    sfListView.prototype.hoverHandler = function (e) {
      var curLi = sf.base.closest(e.target.parentNode, '.' + listItem);

      if (curLi) {
        this.setHoverLI(curLi);
      }
    };

    sfListView.prototype.mouseOutHandleer = function (e) {
      this.removeHover();
    };

    sfListView.prototype.removeHover = function () {
      var hoverLI = this.element.querySelector('.' + hover);

      if (hoverLI) {
        hoverLI.classList.remove(hover);
      }
    };

    sfListView.prototype.removeFocus = function () {
      if (!this.curUL) {
        this.curUL = this.element.querySelector('ul');
      }

      var focusedLI = this.curUL.querySelectorAll('.' + focused);

      for (var _i = 0, focusedLI_1 = focusedLI; _i < focusedLI_1.length; _i++) {
        var ele = focusedLI_1[_i];
        ele.classList.remove(focused);
      }
    };

    sfListView.prototype.isValidLI = function (li) {
      return li && li.classList.contains(listItem) && !li.classList.contains(groupListItem) && !li.classList.contains(disable);
    };

    sfListView.prototype.removeSelect = function (li) {
      if (sf.base.isNullOrUndefined(li)) {
        var selectedLI = this.element.querySelectorAll('.' + selected);

        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
          var ele = selectedLI_1[_i];
          ele.setAttribute('aria-selected', 'false');
          ele.classList.remove(selected);
        }
      } else {
        li.classList.remove(selected);
        li.setAttribute('aria-selected', 'false');
      }
    };

    sfListView.prototype.setSelectLI = function (li, e) {
      if (this.isValidLI(li) && !li.classList.contains(selected) && this.enable) {
        if (!this.showCheckBox) {
          this.removeSelect();
        }

        li.classList.add(selected);
        li.setAttribute('aria-selected', 'true');
        this.removeHover();

        if (li.classList.contains(hasChild)) {
          this.renderSubList(li);
        }
      }
    };

    sfListView.prototype.renderSubList = function (li) {
      var liElement = li;
      var uID = li.getAttribute('data-uid');
      var headerElment = this.element.querySelector('.' + header);
      li.classList.remove(selected);
      li.classList.add(focused);
      if (this.showHeader && headerElment) headerElment.children[0].style.display = null;

      if (liElement.classList.contains(hasChild) && uID) {
        var UlElement = this.element.querySelector('[pid=\'' + uID + '\']');

        if (!UlElement) {
          var args = {
            ElementId: uID,
            Key: this.curDSKey
          }; // tslint:disable

          this.dotNetRef.invokeMethodAsync('ListChildDataSource', args); // tslint:enable   
        } else {
          this.renderChildList(uID);
        }

        if (!this.isTemplate) {
          this.headerTitleInfo.push(liElement.innerText.trim());
          this.updateHeaderTitle(liElement.innerText.trim());
        }

        this.dataSourceLevel.push(uID);
        this.curDSKey = uID;
      }
    };

    sfListView.prototype.renderChildList = function (id, selectedItems) {
      var UlElement = this.element.querySelectorAll('ul');

      if (!UlElement[UlElement.length - 1].getAttribute('pid')) {
        UlElement[UlElement.length - 1].setAttribute('pid', id);
      }

      for (var i = 0; i < UlElement.length; i++) {
        if (UlElement[i].getAttribute('pid') == id) {
          this.switchView(this.curUL, UlElement[i], false);
          this.curUL = UlElement[i];
          if (selectedItems) this.selectedItems[id] = selectedItems;
        }
      }
    };

    sfListView.prototype.keyActionHandler = function (e) {
      switch (e.keyCode) {
        case 36:
          this.homeKeyHandler(e);
          break;

        case 35:
          this.homeKeyHandler(e, true);
          break;

        case 40:
          this.arrowKeyHandler(e);
          break;

        case 38:
          this.arrowKeyHandler(e, true);
          break;

        case 13:
          this.enterKeyHandler(e);
          break;

        case 8:
          if (this.showCheckBox && this.curDSKey) {
            this.uncheckAllItems();
          }

          this.back();
          break;

        case 32:
          this.spaceKeyHandler(e);
          break;
      }
    };

    sfListView.prototype.homeKeyHandler = function (e, end) {
      var activeElement = this.curUL.querySelector('.' + selected);
      var focusedElement = this.curUL.querySelector('.' + focused);

      if (activeElement) {
        activeElement.removeAttribute('aria-selected');
        activeElement.classList.remove(selected);
      }

      if (focusedElement) {
        focusedElement.classList.remove(focused);
      }

      var index = !end ? 0 : this.curUL.children.length - 1;
      var liElement = this.curUL.children[index];
      liElement.classList.add(selected);
      liElement.setAttribute('aria-selected', 'true');

      if (this.showCheckBox) {
        liElement.classList.add(focused);
      }

      if (this.curUL.children[index]) {
        this.element.setAttribute('aria-activedescendant', this.curUL.children[index].id.toString());
      } else {
        this.element.removeAttribute('aria-activedescendant');
      }
    };

    sfListView.prototype.onArrowKeyDown = function (e, prev) {
      var siblingLI;
      var li;
      var hasChildElement = !sf.base.isNullOrUndefined(this.curUL.querySelector('.' + hasChild)) ? true : false;

      if (hasChildElement || this.showCheckBox) {
        li = this.curUL.querySelector('.' + focused) || this.curUL.querySelector('.' + selected);
        siblingLI = this.getSiblingLI(this.curUL.querySelectorAll('.' + listItem), li, prev);

        if (!sf.base.isNullOrUndefined(siblingLI)) {
          if (li) {
            li.classList.remove(focused);

            if (!this.showCheckBox) {
              li.classList.remove(selected);
            }
          }

          if (siblingLI.classList.contains(hasChild) || this.showCheckBox) {
            siblingLI.classList.add(focused);
          } else {
            this.setSelectLI(siblingLI, e);
          }
        }
      } else {
        li = this.curUL.querySelector('.' + selected);
        siblingLI = this.getSiblingLI(this.curUL.querySelectorAll('.' + listItem), li, prev);
        this.setSelectLI(siblingLI, e);
      }

      if (siblingLI) {
        this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());
      } else {
        this.element.removeAttribute('aria-activedescendant');
      }

      return siblingLI;
    };

    sfListView.prototype.getSiblingLI = function (elementArray, element, isPrevious) {
      var licollection = Array.prototype.slice.call(elementArray);
      var curIndex = licollection.indexOf(element);

      if (isPrevious) {
        return licollection[curIndex - 1];
      } else {
        return licollection[curIndex + 1];
      }
    };

    sfListView.prototype.arrowKeyHandler = function (e, prev) {
      e.preventDefault();

      if (this.curUL) {
        var siblingLI = this.onArrowKeyDown(e, prev);
        var elementTop = this.element.getBoundingClientRect().top;
        var elementHeight = this.element.getBoundingClientRect().height;
        var heightDiff = void 0;

        if (siblingLI) {
          var siblingTop = siblingLI.getBoundingClientRect().top;
          var siblingHeight = siblingLI.getBoundingClientRect().height;

          if (!prev) {
            var height = this.isWindow ? window.innerHeight : elementHeight;
            heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;

            if (heightDiff > height) {
              this.isWindow ? window.scroll(0, pageYOffset + (heightDiff - height)) : this.element.scrollTop = this.element.scrollTop + (heightDiff - height);
            }
          } else {
            heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;

            if (heightDiff < 0) {
              this.isWindow ? window.scroll(0, pageYOffset + heightDiff) : this.element.scrollTop = this.element.scrollTop + heightDiff;
            }
          }
        }
      }
    };

    sfListView.prototype.enterKeyHandler = function (e) {
      if (this.curUL) {
        var hasChilds = this.curUL.querySelector('.' + hasChild) ? true : false;
        var li = this.curUL.querySelector('.' + focused);

        if (hasChilds && li) {
          li.classList.remove(focused);

          if (this.showCheckBox) {
            this.removeSelect();
            this.removeSelect(li);
            this.removeHover();
          }

          this.setSelectLI(li, e);
        }
      }
    };

    sfListView.prototype.checkAllItems = function () {
      this.updateCheckBoxState(true);
    };

    sfListView.prototype.uncheckAllItems = function () {
      this.updateCheckBoxState(false);
    };

    sfListView.prototype.updateCheckBoxState = function (isChecked) {
      if (this.showCheckBox) {
        var liCollection = this.curUL.querySelectorAll('li');
        var liElementCount = !this.enableVirtualization ? this.curUL.childElementCount : this.curUL.querySelector('.' + virtualUlContainer).childElementCount;

        for (var i = 0; i < liElementCount; i++) {
          var checkIcon = liCollection[i].querySelector('.' + checkboxIcon);

          if (checkIcon) {
            if (isChecked) {
              if (!checkIcon.classList.contains(checked)) {
                this.checkItem(liCollection[i]);
              }
            } else {
              if (checkIcon.classList.contains(checked)) {
                this.uncheckItem(liCollection[i]);
              }
            }
          }
        }
      }
    };

    sfListView.prototype.checkItem = function (item) {
      this.toggleCheckBox(item, true);
    };

    sfListView.prototype.getCheckdata = function (item, isCheck) {
      var liItem = this.curUL.querySelector('[data-uid=\'' + item.id + '\']');
      if (isCheck) this.checkItem(liItem);else this.uncheckItem(liItem);
    };

    sfListView.prototype.spaceKeyHandler = function (e) {
      e.preventDefault();

      if (this.enable && this.showCheckBox && this.curUL) {
        var li = this.curUL.querySelector('.' + focused);

        if (!sf.base.isNullOrUndefined(li) && sf.base.isNullOrUndefined(li.querySelector('.' + checked))) {
          this.SetChecked(li, li.querySelector('.' + checkboxWrapper));
        } else {
          this.uncheckItem(li);
        }
      }
    };

    sfListView.prototype.SetChecked = function (item, checkboxElement) {
      this.removeFocus();
      item.classList.add(focused);
      item.classList.add(selected);
      item.setAttribute('aria-selected', 'true');

      if (checkboxElement) {
        checkboxElement.querySelector('.' + checkboxIcon).classList.add(checked);
        checkboxElement.setAttribute('aria-checked', 'true');
      }

      if (this.selectedItems[this.curDSKey].indexOf(item.getAttribute('data-uid')) === -1) {
        this.selectedItems[this.curDSKey].push(item.getAttribute('data-uid'));
      }
    };

    sfListView.prototype.toggleCheckBox = function (item, isChecked) {
      if (this.showCheckBox) {
        var liElement = item;

        if (!sf.base.isNullOrUndefined(liElement)) {
          var checkboxIconElement = liElement.querySelector('.' + checkboxIcon);
          isChecked ? liElement.classList.add(selected) : liElement.classList.remove(selected);
          liElement.setAttribute('aria-selected', isChecked ? 'true' : 'false');
          isChecked ? checkboxIconElement.classList.add(checked) : checkboxIconElement.classList.remove(checked);
          checkboxIconElement.parentElement.setAttribute('aria-checked', isChecked ? 'true' : 'false');
        }
      }
    };

    sfListView.prototype.uncheckItem = function (item) {
      if (this.selectedItems[this.curDSKey].indexOf(item.getAttribute('data-uid')) !== -1) {
        this.selectedItems[this.curDSKey].splice(this.selectedItems[this.curDSKey].indexOf(item.getAttribute('data-uid')), 1);
      }

      this.toggleCheckBox(item, false);
    };

    sfListView.prototype.AddActiveClass = function () {
      var liCollection = this.curUL.querySelector('.' + virtualUlContainer).children;
      var selectedItemsId = this.selectedItems[this.curDSKey];

      for (var i = 0; i < liCollection.length; i++) {
        if (!this.showCheckBox) {
          if (selectedItemsId[0] == liCollection[i].getAttribute("data-uid")) {
            liCollection[i].classList.add(selected);
          } else {
            liCollection[i].classList.remove(selected);
          }
        } else {
          if (this.focusedElementId) {
            if (this.focusedElementId == liCollection[i].getAttribute("data-uid")) {
              liCollection[i].classList.add(focused);
            } else {
              liCollection[i].classList.remove(focused);
            }
          }

          if (selectedItemsId.length > 0) {
            if (selectedItemsId.indexOf(liCollection[i].getAttribute("data-uid")) !== -1) {
              liCollection[i].classList.add(selected);
              this.toggleCheckBox(liCollection[i], true);
            } else {
              liCollection[i].classList.remove(selected);
              this.toggleCheckBox(liCollection[i], false);
            }
          }
        }
      }
    };

    sfListView.prototype.getSelectedItems = function () {
      var args = {
        ElementId: this.selectedItems[this.curDSKey],
        Key: this.curDSKey
      };
      return JSON.stringify(args);
    }; // Animation Related Functions


    sfListView.prototype.switchView = function (fromView, toView, reverse) {
      var _this = this;

      if (fromView && toView) {
        var fPos_1 = fromView.style.position;
        var overflow_1 = this.element.style.overflow !== 'hidden' ? this.element.style.overflow : '';
        fromView.style.position = 'absolute';
        fromView.classList.add('e-view');
        var anim = void 0;
        var duration = this.animation.duration;

        if (this.animation.effect) {
          anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];
        } else {
          var slideLeft = 'SlideLeft';
          anim = effectsConfig[slideLeft];
          reverse = this.enableRtl;
          duration = 0;
        }

        this.element.style.overflow = 'hidden';
        this.aniObj.animate(fromView, {
          name: reverse === true ? anim[0] : anim[1],
          duration: duration,
          timingFunction: this.animation.easing,
          end: function end(model) {
            fromView.style.display = 'none';
            _this.element.style.overflow = overflow_1;
            fromView.style.position = fPos_1;
            fromView.classList.remove('e-view');
          }
        });
        toView.style.display = '';
        this.aniObj.animate(toView, {
          name: reverse === true ? anim[2] : anim[3],
          duration: duration,
          timingFunction: this.animation.easing,
          end: function end() {
            _this.dotNetRef.invokeMethodAsync('triggerActionComplete');
          }
        });
        this.curUL = toView;
      }
    };

    sfListView.prototype.setAnimation = function (animation) {
      this.animation = animation;
    };

    sfListView.prototype.setSelectedItems = function (selectedElementIdInfo) {
      this.selectedItems = {
        defaultData_Key: selectedElementIdInfo
      };
      this.dataSourceLevel = [dataSource_Key];
      this.curDSKey = dataSource_Key;
    };

    sfListView.prototype.updateHeaderTitle = function (title) {
      this.headerTitleInfo[this.headerTitleInfo.length - 1] = title;
      if (this.headerElement) this.headerElement.innerText = title;
    };

    return sfListView;
  }();

  var ListView = {
    initialize: function initialize(element, dotnetRef, properties, eventList) {
      new sfListView(element, dotnetRef, properties, eventList);
      element.blazor__instance.initialize();
    },
    renderChildList: function renderChildList(element, parentId, selectedItems) {
      element.blazor__instance.renderChildList(parentId, selectedItems);
    },
    updateElementDifference: function updateElementDifference(element, ListDifference) {
      element.blazor__instance.updateElementDifference(ListDifference);
    },
    AddActiveClass: function AddActiveClass(element) {
      element.blazor__instance.AddActiveClass();
    },
    showHideItem: function showHideItem(element, item, display) {
      element.blazor__instance.showHideItem(item, display);
    },
    enableState: function enableState(element, item, isEnable) {
      element.blazor__instance.enableState(item, isEnable);
    },
    back: function back(element) {
      element.blazor__instance.back();
    },
    checkAllItems: function checkAllItems(element) {
      element.blazor__instance.checkAllItems();
    },
    uncheckAllItems: function uncheckAllItems(element) {
      element.blazor__instance.uncheckAllItems();
    },
    getCheckdata: function getCheckdata(element, item, isCheck) {
      element.blazor__instance.getCheckdata(item, isCheck);
    },
    selectItem: function selectItem(element, item) {
      element.blazor__instance.selectItem(item);
    },
    updateLiElementHeight: function updateLiElementHeight(element) {
      element.blazor__instance.updateLiElementHeight();
    },
    getSelectedItems: function getSelectedItems(element) {
      return element.blazor__instance.getSelectedItems();
    },
    setAnimation: function setAnimation(element, animaton) {
      element.blazor__instance.setAnimation(animaton);
    },
    setSelectedItems: function setSelectedItems(element, selectedElementIdInfo) {
      element.blazor__instance.setSelectedItems(selectedElementIdInfo);
    },
    updateHeaderTitle: function updateHeaderTitle(element, title) {
      element.blazor__instance.updateHeaderTitle(title);
    }
  };
  return ListView;
}();

/***/ })

}]);